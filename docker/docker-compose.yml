name: typed-scanner

x-env-common: &env_common
  env_file:
    - .env

x-net-common: &net_common
  networks:
    - appnet

services:
  # --- MinIO ---------------------------------------------------------------
  minio:
    <<: [*env_common, *net_common]
    image: minio/minio:RELEASE.2025-07-23T15-54-02Z-cpuv1
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_NOTIFY_WEBHOOK_ENABLE_events: "on"
      MINIO_NOTIFY_WEBHOOK_ENDPOINT_events: "http://webhooks:5000/minio"
    ports:
      - "${MINIO_API_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    volumes:
      - minio-data:/data
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://127.0.0.1:9000/minio/health/live"]
      interval: 10s
      timeout: 3s
      retries: 10
      start_period: 15s

  # --- One-shot: create bucket + webhook events (no external script) -------
  mc-init:
    <<: [*env_common, *net_common]
    image: minio/mc:RELEASE.2025-05-21T01-59-54Z
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -lc "
        set -eu;
        echo '[mc-init] configuring alias...';
        for i in 1 2 3 4 5 6 7 8 9 10; do
          mc alias set local http://minio:9000 '${MINIO_ROOT_USER}' '${MINIO_ROOT_PASSWORD}' && break || sleep 2;
        done;
        echo '[mc-init] creating bucket: ${MINIO_BUCKET}';
        mc mb --ignore-existing local/${MINIO_BUCKET} || true;
        echo '[mc-init] attaching webhook events';
        mc event add local/${MINIO_BUCKET} arn:minio:sqs::events:webhook --event put,delete || true;
        echo '[mc-init] done';
      "

  # --- Webhook receiver ----------------------------------------------------
  webhooks:
    <<: [*env_common, *net_common]
    build:
      context: ..
      dockerfile: docker/webhooks/Dockerfile
    environment:
      PORT: "5000"
      PREFECT_API: ${PREFECT_API:-}
      PREFECT_DEPLOYMENT_ID: ${PREFECT_DEPLOYMENT_ID:-}
      AIRFLOW_BASE_URL: ${AIRFLOW_BASE_URL:-}
      AIRFLOW_DAG_ID: ${AIRFLOW_DAG_ID:-typed_scanner}
      WEBHOOK_AUTH_TOKEN: ${WEBHOOK_AUTH_TOKEN:-}
    ports:
      - "5000:5000"
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://127.0.0.1:5000/health"]
      interval: 10s
      timeout: 3s
      retries: 6
      start_period: 5s

  # --- C++ scanner ---------------------------------------------------------
  scanner:
    <<: [*env_common, *net_common]
    build:
      context: ..
      dockerfile: docker/Dockerfile
    image: typed-scanner:local
    environment:
      MINIO_ENDPOINT: http://minio:9000
      MINIO_BUCKET: ${MINIO_BUCKET}
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      ART_ROOT: /artifacts/typed-scanner
      SLUG_MODE: basename
      SLUG_LEN: "64"
      SCANNER_ARGS: "--config=/work/configs/config.toml --artifact-root=/artifacts/typed-scanner --port=8080"

    depends_on:
      minio:
        condition: service_healthy
    ports:
      - "8080:8080"
    volumes:
      - ../artifacts:/artifacts
      - ../configs:/work/configs:ro
      - ../templates:/work/templates:ro
      - ../web:/work/web:ro
      - ../data:/work/data:ro
      - ../incoming-cache:/work/incoming

  # --- Prefect (profile) ---------------------------------------------------
  prefect:
    <<: *net_common
    profiles: ["prefect"]
    image: prefecthq/prefect:3-latest
    command: ["prefect", "server", "start", "--host", "0.0.0.0"]
    ports:
      - "4200:4200"
    volumes:
      - ../orchestrators/prefect:/work/prefect:ro

  # --- Airflow (profile) ---------------------------------------------------
  airflow:
    <<: *net_common
    profiles: ["airflow"]
    image: apache/airflow:2.9.3-python3.11
    environment:
      AIRFLOW_UID: "50000"
      AIRFLOW__CORE__LOAD_EXAMPLES: "False"
      _PIP_ADDITIONAL_REQUIREMENTS: ""
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    command: >
      bash -lc "
        mkdir -p /tmp/scripts &&
        cp /scripts-ro/airflow-init.sh /tmp/scripts/airflow-init.sh &&
        sed -i 's/\r$//' /tmp/scripts/airflow-init.sh &&
        bash /tmp/scripts/airflow-init.sh &&
        airflow standalone
      "
    ports:
      - "8081:8080"
    volumes:
      - ../orchestrators/airflow/dags:/opt/airflow/dags:ro
      - ./scripts/airflow-init.sh:/scripts-ro/airflow-init.sh:ro

networks:
  appnet: {}

volumes:
  minio-data: {}
