# Global runtime & environment defaults (parsed by C++ via toml++)
[project]
id = "typed-scanner"
artifact_root = "artifacts/typed-scanner"   # container mount point

[server]
port = 8080
scan_per_request = true                     # rescan artifacts on GET /
index_title = "Typed Scanner Reports"

[minio]
endpoint = "http://minio:9000"
bucket   = "incoming"
region   = "us-east-1"
access_key_env = "MINIO_ROOT_USER"          # read from env
secret_key_env = "MINIO_ROOT_PASSWORD"

# Orchestrators: enable one or many
[orchestrators]
enabled = ["prefect", "airflow"]   # pick any subset: ["prefect"], ["airflow"], or both
mode    = "poll"                  # "event" (MinIO notifications) | "poll"

[orchestrators.prefect]
deployment_name = "typed-scanner"
work_pool       = "default-agent"
# If using event webhooks to Prefect Cloud, set the webhook URL; otherwise run a small local fan-out
webhook_url     = ""               # optional; leave blank if not using webhooks
tags            = ["typed-scanner"]

[orchestrators.airflow]
# Two ways: REST-trigger OR sensors inside the DAG (both are okay)
base_url        = "http://airflow-webserver:8080"
dag_id          = "typed_scanner"
rest_trigger    = true             # if true, fan-out service POSTs /api/v1/dags/<dag_id>/dagRuns
use_s3_sensors  = true             # DAG also uses S3KeySensor / S3KeysUnchangedSensor to watch MinIO

# Event fan-out (only used when orchestrators.mode="event")
[events]
source = "minio"                   # MinIO bucket notifications
route  = "both"                    # "prefect" | "airflow" | "both"

# Poll settings (only used when orchestrators.mode="poll")
[poll]
interval_s = 30
prefixes   = [""]

[scanner]
reader_threads = 4
chunk_bytes    = 524288        # 512 KiB
arena_bytes    = 16777216      # 16 MiB per-chunk arena
max_errors_per_field = 20

[csv]
delimiter = ","
quote     = "\""
escape    = "\""
header    = true
null_values = ["", "NA", "null", "NULL"]

[jsonl]
encoding = "utf-8"
strict   = true                # strict = reject non-object lines

[render]
output_ext = "html"
template_dir = "templates"
partials_dir = "templates/partials"
static_js = ["web/js/vega.min.js","web/js/vega-lite.min.js","web/js/vega-embed.min.js"]
static_css = ["web/css/report.css"]

[sync]
on_create = "build"            # build|skip
on_update = "rebuild"          # rebuild|skip
on_delete = "delete_artifacts" # delete_artifacts|keep
idempotency_use_etag = true

[limits]
max_parallel = 2
max_inflight_bytes = 1073741824   # 1 GiB
